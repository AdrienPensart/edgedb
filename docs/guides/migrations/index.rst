.. _ref_guide_migrations:


==========
Migrations
==========

.. toctree::
    :maxdepth: 3
    :hidden:

    names
    backlink
    proptype
    proptolink
    reqlink

EdgeDB’s baked-in migration system lets you painlessly evolve your schema
throughout the development process.

1. Write an initial schema
--------------------------

By convention, your schema is defined inside of ``.esdl`` files inside the
``dbschema`` directory of your project.

.. code-block::

  .
  ├── dbschema
  │   ├── default.esdl
  │   └── migrations
  │       └── 00001.edgeql
  │       └── ...
  └── edgedb.toml

The schema itself is declaratively defined using EdgeDB's
schema definition language.

.. code-block:: sdl

  type User {
    required property name -> str;
  }

  type Post {
    required property title -> str;
    required link author -> User;
  }


It's common to keep your entire schema in a single file, typically called
``default.esdl``. However it's also possible to split it across a number of
``.esdl`` files.

To spin up a new instance and populate it with an initial schema, execute the
following commands in a fresh directory.

.. code-block:: bash

  $ edgedb project init
  Do you want to initialize a new project? [Y/n]
  > Y
  <additional prompts>
  $ edgedb migration create
  Created dbschema/migrations/00001.edgeql
  $ edgedb migrate
  Applied dbschema/migrations/00001.edgeql

2. Edit your schema files
-------------------------

As your application evolves, directly edit your schema files to reflect your
desired data model.

.. code-block:: sdl-diff

    type User {
      required property name -> str;
    }

    type BlogPost {
  -   property title -> str;
  +   required property title -> str;
      required link author -> User;
    }

  + type Comment {
  +   required property content -> str;
  + }

3. Generate a migration
-----------------------

To generate a migration that reflects these changes, run ``edgedb migration
create``.

.. code-block:: bash

  $ edgedb migration create


The CLI reads your schema file and sends it to the active EdgeDB instance. The
instance compares the file's contents to its current schema state and
determines a migration plan.  **The migration plan is generated by the
database itself.**

This plan is then presented to you interactively; each detected schema change
will be individually presented to you for approval. Below, we are asked to
approve the addition of the ``Comment`` object type.

.. code-block:: bash

  $ edgedb migration create
  Did you create object type 'default::Comment'?
  [y,n,l,c,b,s,q,?]
  >

For each prompt, you have a variety of commands at your disposal. Type ``y``
to approve, ``n`` to reject, ``q`` to safely quit the tool, or ``?`` for a
breakdown of some more advanced options.

Let's approve all the prompts.

.. code-block:: bash

  $ edgedb migration create
  Did you create object type 'default::Comment'?
  [y,n,l,c,b,s,q,?]
  > y
  Did you make property 'title' of object type
  'default::BlogPost' required? [y,n,l,c,b,s,q,?]
  > y
  Please specify an expression to populate existing objects in order to make
  property 'title' of object type 'default::Post' required:
  fill_expr>

Hm, after approving the change to ``title``, we're being asked for an
expression to "populate existing objects". What's this all about?

Handling data migrations
^^^^^^^^^^^^^^^^^^^^^^^^

Sometimes, a migration requires you to provide an expression to map the
contents of your database from the old schema to the new one.

In the example above, we're making the ``title`` property on ``BlogPost``
required. This requires a data migration, because our database may contain
blog posts without a ``title`` property. The expression you provide will be
used to assign a value to all posts that don't currently have a title.

Let's provide a simple default title: "Untitled".

.. code-block::

  $ edgedb migration create
  ...
  Please specify an expression to populate existing objects in order to make
  property 'title' of object type 'default::Post' required:
  fill_expr> 'Untitled'
  Created dbschema/migrations/00002.edgeql, id:
  m1yt3gbstvyfzy2rhqt5335ld6br2amw7ywqu2bvjiqsacbcdxzyya

Nice! It accepted our answer and created a new migration file
``00002.edgeql``. Note that we could have provide an arbitrary EdgeQL
expression, instead of a simple default value like ``'Untitled'``. For
instance, we could have set the title to the post's ``id``:

.. code-block::

  fill_expr> <str>.id

Migration files
^^^^^^^^^^^^^^^

Let's see what the newly created ``00002.edgeql`` file contains.

.. code-block:: edgeql

  CREATE MIGRATION m1yt3gbstvyfzy2rhqt5335ld6br2amw7ywqu2bvjiqsacbcdxzyya
    ONTO m1cvx47vntfoy24evwrdli7o5unarx2c5t3i2rfspd2qosi6d6iahq
  {
    CREATE TYPE default::Comment {
        CREATE REQUIRED PROPERTY content -> std::str;
    };
    ALTER TYPE default::Post {
        ALTER PROPERTY title {
            SET REQUIRED USING ('Untitled');
        };
    };
  };

We have a ``CREATE MIGRATION`` block containing two statements: one that
creates the ``Comment`` type and another that alters ``Post.title``. We can
see that our expression (``'Untitled'``) is included directly in the migration
file.

4. Apply the migration
----------------------

We've generated a migration file, but we haven't yet applied it against our
database! The following command will apply all unapplied migration files:

.. code-block:: bash

  $ edgedb migrate
  Applied m1virjowa... (00001.edgeql)

That's it! You've created and applied your first EdgeDB migration. Your
instance is now using the latest schema.

Further reading
^^^^^^^^^^^^^^^

For guides on advanced migration workflows, refer to the following guides.

- :ref:`Making a property required <ref_migration_names>`
- :ref:`Adding backlinks <ref_migration_backlink>`
- :ref:`Changing the type of a property <ref_migration_proptype>`
- :ref:`Changing a property to a link <ref_migration_proptolink>`
- :ref:`Adding a required link <ref_migration_reqlink>`

For more information on how migrations work in EdgeDB, check out the :ref:`CLI
reference <ref_cli_edgedb_migration>` or the `Beta 1 blog post
</blog/edgedb-1-0-beta-1-sirius#built-in-database-migrations-in-use>`_, which
describes the design of the migration system.
